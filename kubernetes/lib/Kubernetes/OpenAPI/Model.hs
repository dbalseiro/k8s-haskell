{-
   Kubernetes

   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   OpenAPI Version: 3.0.1
   Kubernetes API version: release-1.20
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Kubernetes.OpenAPI.Model
-}

{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveFoldable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TupleSections #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -fno-warn-unused-matches -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Kubernetes.OpenAPI.Model (module Kubernetes.OpenAPI.Model, module Kubernetes.OpenAPI.ImportMappings) where

import Kubernetes.OpenAPI.Core
import Kubernetes.OpenAPI.MimeTypes
import Kubernetes.OpenAPI.ImportMappings

import Data.Aeson ((.:),(.:!),(.:?),(.=))

import qualified Control.Arrow as P (left)
import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Base64 as B64
import qualified Data.ByteString.Char8 as BC
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.HashMap.Lazy as HM
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Set as Set
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Time as TI
import qualified Lens.Micro as L
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Control.Applicative ((<|>))
import Control.Applicative (Alternative)
import Data.Function ((&))
import Data.Monoid ((<>))
import Data.Text (Text)
import Prelude (($),(/=),(.),(<$>),(<*>),(>>=),(=<<),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)

import qualified Prelude as P



-- * Parameter newtypes


-- ** AllowWatchBookmarks
newtype AllowWatchBookmarks = AllowWatchBookmarks { unAllowWatchBookmarks :: Bool } deriving (P.Eq, P.Show)

-- ** Body
newtype Body = Body { unBody :: A.Value } deriving (P.Eq, P.Show, A.ToJSON)

-- ** Command
newtype Command = Command { unCommand :: Text } deriving (P.Eq, P.Show)

-- ** Container
newtype Container = Container { unContainer :: Text } deriving (P.Eq, P.Show)

-- ** Continue
newtype Continue = Continue { unContinue :: Text } deriving (P.Eq, P.Show)

-- ** DryRun
newtype DryRun = DryRun { unDryRun :: Text } deriving (P.Eq, P.Show)

-- ** Exact
newtype Exact = Exact { unExact :: Bool } deriving (P.Eq, P.Show)

-- ** Export
newtype Export = Export { unExport :: Bool } deriving (P.Eq, P.Show)

-- ** FieldManager
newtype FieldManager = FieldManager { unFieldManager :: Text } deriving (P.Eq, P.Show)

-- ** FieldSelector
newtype FieldSelector = FieldSelector { unFieldSelector :: Text } deriving (P.Eq, P.Show)

-- ** Follow
newtype Follow = Follow { unFollow :: Bool } deriving (P.Eq, P.Show)

-- ** Force
newtype Force = Force { unForce :: Bool } deriving (P.Eq, P.Show)

-- ** GracePeriodSeconds
newtype GracePeriodSeconds = GracePeriodSeconds { unGracePeriodSeconds :: Int } deriving (P.Eq, P.Show)

-- ** Group
newtype Group = Group { unGroup :: Text } deriving (P.Eq, P.Show)

-- ** InsecureSkipTlsVerifyBackend
newtype InsecureSkipTlsVerifyBackend = InsecureSkipTlsVerifyBackend { unInsecureSkipTlsVerifyBackend :: Bool } deriving (P.Eq, P.Show)

-- ** LabelSelector
newtype LabelSelector = LabelSelector { unLabelSelector :: Text } deriving (P.Eq, P.Show)

-- ** Limit
newtype Limit = Limit { unLimit :: Int } deriving (P.Eq, P.Show)

-- ** LimitBytes
newtype LimitBytes = LimitBytes { unLimitBytes :: Int } deriving (P.Eq, P.Show)

-- ** Logpath
newtype Logpath = Logpath { unLogpath :: Text } deriving (P.Eq, P.Show)

-- ** Name
newtype Name = Name { unName :: Text } deriving (P.Eq, P.Show)

-- ** Namespace
newtype Namespace = Namespace { unNamespace :: Text } deriving (P.Eq, P.Show)

-- ** OrphanDependents
newtype OrphanDependents = OrphanDependents { unOrphanDependents :: Bool } deriving (P.Eq, P.Show)

-- ** Path
newtype Path = Path { unPath :: Text } deriving (P.Eq, P.Show)

-- ** Path2
newtype Path2 = Path2 { unPath2 :: Text } deriving (P.Eq, P.Show)

-- ** Plural
newtype Plural = Plural { unPlural :: Text } deriving (P.Eq, P.Show)

-- ** Ports
newtype Ports = Ports { unPorts :: Int } deriving (P.Eq, P.Show)

-- ** Pretty
newtype Pretty = Pretty { unPretty :: Text } deriving (P.Eq, P.Show)

-- ** Previous
newtype Previous = Previous { unPrevious :: Bool } deriving (P.Eq, P.Show)

-- ** PropagationPolicy
newtype PropagationPolicy = PropagationPolicy { unPropagationPolicy :: Text } deriving (P.Eq, P.Show)

-- ** ResourceVersion
newtype ResourceVersion = ResourceVersion { unResourceVersion :: Text } deriving (P.Eq, P.Show)

-- ** ResourceVersionMatch
newtype ResourceVersionMatch = ResourceVersionMatch { unResourceVersionMatch :: Text } deriving (P.Eq, P.Show)

-- ** SinceSeconds
newtype SinceSeconds = SinceSeconds { unSinceSeconds :: Int } deriving (P.Eq, P.Show)

-- ** Stderr
newtype Stderr = Stderr { unStderr :: Bool } deriving (P.Eq, P.Show)

-- ** Stdin
newtype Stdin = Stdin { unStdin :: Bool } deriving (P.Eq, P.Show)

-- ** Stdout
newtype Stdout = Stdout { unStdout :: Bool } deriving (P.Eq, P.Show)

-- ** TailLines
newtype TailLines = TailLines { unTailLines :: Int } deriving (P.Eq, P.Show)

-- ** TimeoutSeconds
newtype TimeoutSeconds = TimeoutSeconds { unTimeoutSeconds :: Int } deriving (P.Eq, P.Show)

-- ** Timestamps
newtype Timestamps = Timestamps { unTimestamps :: Bool } deriving (P.Eq, P.Show)

-- ** Tty
newtype Tty = Tty { unTty :: Bool } deriving (P.Eq, P.Show)

-- ** Version
newtype Version = Version { unVersion :: Text } deriving (P.Eq, P.Show)

-- ** Watch
newtype Watch = Watch { unWatch :: Bool } deriving (P.Eq, P.Show)

-- * Models

-- ** V1ConfigMap
-- | V1ConfigMap
-- ConfigMap holds configuration data for pods to consume.
data V1ConfigMap = V1ConfigMap
  { v1ConfigMapApiVersion :: !(Maybe Text) -- ^ "apiVersion" - APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  , v1ConfigMapBinaryData :: !(Maybe (Map.Map String ByteArray)) -- ^ "binaryData" - BinaryData contains the binary data. Each key must consist of alphanumeric characters, &#39;-&#39;, &#39;_&#39; or &#39;.&#39;. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
  , v1ConfigMapData :: !(Maybe (Map.Map String Text)) -- ^ "data" - Data contains the configuration data. Each key must consist of alphanumeric characters, &#39;-&#39;, &#39;_&#39; or &#39;.&#39;. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
  , v1ConfigMapImmutable :: !(Maybe Bool) -- ^ "immutable" - Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil. This is a beta field enabled by ImmutableEphemeralVolumes feature gate.
  , v1ConfigMapKind :: !(Maybe Text) -- ^ "kind" - Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  , v1ConfigMapMetadata :: !(Maybe V1ObjectMeta) -- ^ "metadata"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON V1ConfigMap
instance A.FromJSON V1ConfigMap where
  parseJSON = A.withObject "V1ConfigMap" $ \o ->
    V1ConfigMap
      <$> (o .:? "apiVersion")
      <*> (o .:? "binaryData")
      <*> (o .:? "data")
      <*> (o .:? "immutable")
      <*> (o .:? "kind")
      <*> (o .:? "metadata")

-- | ToJSON V1ConfigMap
instance A.ToJSON V1ConfigMap where
  toJSON V1ConfigMap {..} =
   _omitNulls
      [ "apiVersion" .= v1ConfigMapApiVersion
      , "binaryData" .= v1ConfigMapBinaryData
      , "data" .= v1ConfigMapData
      , "immutable" .= v1ConfigMapImmutable
      , "kind" .= v1ConfigMapKind
      , "metadata" .= v1ConfigMapMetadata
      ]


-- | Construct a value of type 'V1ConfigMap' (by applying it's required fields, if any)
mkV1ConfigMap
  :: V1ConfigMap
mkV1ConfigMap =
  V1ConfigMap
  { v1ConfigMapApiVersion = Nothing
  , v1ConfigMapBinaryData = Nothing
  , v1ConfigMapData = Nothing
  , v1ConfigMapImmutable = Nothing
  , v1ConfigMapKind = Nothing
  , v1ConfigMapMetadata = Nothing
  }

-- ** V1ConfigMapEnvSource
-- | V1ConfigMapEnvSource
-- ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.  The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
data V1ConfigMapEnvSource = V1ConfigMapEnvSource
  { v1ConfigMapEnvSourceName :: !(Maybe Text) -- ^ "name" - Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  , v1ConfigMapEnvSourceOptional :: !(Maybe Bool) -- ^ "optional" - Specify whether the ConfigMap must be defined
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON V1ConfigMapEnvSource
instance A.FromJSON V1ConfigMapEnvSource where
  parseJSON = A.withObject "V1ConfigMapEnvSource" $ \o ->
    V1ConfigMapEnvSource
      <$> (o .:? "name")
      <*> (o .:? "optional")

-- | ToJSON V1ConfigMapEnvSource
instance A.ToJSON V1ConfigMapEnvSource where
  toJSON V1ConfigMapEnvSource {..} =
   _omitNulls
      [ "name" .= v1ConfigMapEnvSourceName
      , "optional" .= v1ConfigMapEnvSourceOptional
      ]


-- | Construct a value of type 'V1ConfigMapEnvSource' (by applying it's required fields, if any)
mkV1ConfigMapEnvSource
  :: V1ConfigMapEnvSource
mkV1ConfigMapEnvSource =
  V1ConfigMapEnvSource
  { v1ConfigMapEnvSourceName = Nothing
  , v1ConfigMapEnvSourceOptional = Nothing
  }

-- ** V1ConfigMapKeySelector
-- | V1ConfigMapKeySelector
-- Selects a key from a ConfigMap.
data V1ConfigMapKeySelector = V1ConfigMapKeySelector
  { v1ConfigMapKeySelectorKey :: !(Text) -- ^ /Required/ "key" - The key to select.
  , v1ConfigMapKeySelectorName :: !(Maybe Text) -- ^ "name" - Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  , v1ConfigMapKeySelectorOptional :: !(Maybe Bool) -- ^ "optional" - Specify whether the ConfigMap or its key must be defined
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON V1ConfigMapKeySelector
instance A.FromJSON V1ConfigMapKeySelector where
  parseJSON = A.withObject "V1ConfigMapKeySelector" $ \o ->
    V1ConfigMapKeySelector
      <$> (o .:  "key")
      <*> (o .:? "name")
      <*> (o .:? "optional")

-- | ToJSON V1ConfigMapKeySelector
instance A.ToJSON V1ConfigMapKeySelector where
  toJSON V1ConfigMapKeySelector {..} =
   _omitNulls
      [ "key" .= v1ConfigMapKeySelectorKey
      , "name" .= v1ConfigMapKeySelectorName
      , "optional" .= v1ConfigMapKeySelectorOptional
      ]


-- | Construct a value of type 'V1ConfigMapKeySelector' (by applying it's required fields, if any)
mkV1ConfigMapKeySelector
  :: Text -- ^ 'v1ConfigMapKeySelectorKey': The key to select.
  -> V1ConfigMapKeySelector
mkV1ConfigMapKeySelector v1ConfigMapKeySelectorKey =
  V1ConfigMapKeySelector
  { v1ConfigMapKeySelectorKey
  , v1ConfigMapKeySelectorName = Nothing
  , v1ConfigMapKeySelectorOptional = Nothing
  }

-- ** V1ConfigMapList
-- | V1ConfigMapList
-- ConfigMapList is a resource containing a list of ConfigMap objects.
data V1ConfigMapList = V1ConfigMapList
  { v1ConfigMapListApiVersion :: !(Maybe Text) -- ^ "apiVersion" - APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  , v1ConfigMapListItems :: !([V1ConfigMap]) -- ^ /Required/ "items" - Items is the list of ConfigMaps.
  , v1ConfigMapListKind :: !(Maybe Text) -- ^ "kind" - Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  , v1ConfigMapListMetadata :: !(Maybe V1ListMeta) -- ^ "metadata"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON V1ConfigMapList
instance A.FromJSON V1ConfigMapList where
  parseJSON = A.withObject "V1ConfigMapList" $ \o ->
    V1ConfigMapList
      <$> (o .:? "apiVersion")
      <*> (o .:  "items")
      <*> (o .:? "kind")
      <*> (o .:? "metadata")

-- | ToJSON V1ConfigMapList
instance A.ToJSON V1ConfigMapList where
  toJSON V1ConfigMapList {..} =
   _omitNulls
      [ "apiVersion" .= v1ConfigMapListApiVersion
      , "items" .= v1ConfigMapListItems
      , "kind" .= v1ConfigMapListKind
      , "metadata" .= v1ConfigMapListMetadata
      ]


-- | Construct a value of type 'V1ConfigMapList' (by applying it's required fields, if any)
mkV1ConfigMapList
  :: [V1ConfigMap] -- ^ 'v1ConfigMapListItems': Items is the list of ConfigMaps.
  -> V1ConfigMapList
mkV1ConfigMapList v1ConfigMapListItems =
  V1ConfigMapList
  { v1ConfigMapListApiVersion = Nothing
  , v1ConfigMapListItems
  , v1ConfigMapListKind = Nothing
  , v1ConfigMapListMetadata = Nothing
  }

-- ** V1ConfigMapNodeConfigSource
-- | V1ConfigMapNodeConfigSource
-- ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.
data V1ConfigMapNodeConfigSource = V1ConfigMapNodeConfigSource
  { v1ConfigMapNodeConfigSourceKubeletConfigKey :: !(Text) -- ^ /Required/ "kubeletConfigKey" - KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
  , v1ConfigMapNodeConfigSourceName :: !(Text) -- ^ /Required/ "name" - Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
  , v1ConfigMapNodeConfigSourceNamespace :: !(Text) -- ^ /Required/ "namespace" - Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
  , v1ConfigMapNodeConfigSourceResourceVersion :: !(Maybe Text) -- ^ "resourceVersion" - ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
  , v1ConfigMapNodeConfigSourceUid :: !(Maybe Text) -- ^ "uid" - UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON V1ConfigMapNodeConfigSource
instance A.FromJSON V1ConfigMapNodeConfigSource where
  parseJSON = A.withObject "V1ConfigMapNodeConfigSource" $ \o ->
    V1ConfigMapNodeConfigSource
      <$> (o .:  "kubeletConfigKey")
      <*> (o .:  "name")
      <*> (o .:  "namespace")
      <*> (o .:? "resourceVersion")
      <*> (o .:? "uid")

-- | ToJSON V1ConfigMapNodeConfigSource
instance A.ToJSON V1ConfigMapNodeConfigSource where
  toJSON V1ConfigMapNodeConfigSource {..} =
   _omitNulls
      [ "kubeletConfigKey" .= v1ConfigMapNodeConfigSourceKubeletConfigKey
      , "name" .= v1ConfigMapNodeConfigSourceName
      , "namespace" .= v1ConfigMapNodeConfigSourceNamespace
      , "resourceVersion" .= v1ConfigMapNodeConfigSourceResourceVersion
      , "uid" .= v1ConfigMapNodeConfigSourceUid
      ]


-- | Construct a value of type 'V1ConfigMapNodeConfigSource' (by applying it's required fields, if any)
mkV1ConfigMapNodeConfigSource
  :: Text -- ^ 'v1ConfigMapNodeConfigSourceKubeletConfigKey': KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
  -> Text -- ^ 'v1ConfigMapNodeConfigSourceName': Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
  -> Text -- ^ 'v1ConfigMapNodeConfigSourceNamespace': Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
  -> V1ConfigMapNodeConfigSource
mkV1ConfigMapNodeConfigSource v1ConfigMapNodeConfigSourceKubeletConfigKey v1ConfigMapNodeConfigSourceName v1ConfigMapNodeConfigSourceNamespace =
  V1ConfigMapNodeConfigSource
  { v1ConfigMapNodeConfigSourceKubeletConfigKey
  , v1ConfigMapNodeConfigSourceName
  , v1ConfigMapNodeConfigSourceNamespace
  , v1ConfigMapNodeConfigSourceResourceVersion = Nothing
  , v1ConfigMapNodeConfigSourceUid = Nothing
  }

-- ** V1ConfigMapProjection
-- | V1ConfigMapProjection
-- Adapts a ConfigMap into a projected volume.  The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
data V1ConfigMapProjection = V1ConfigMapProjection
  { v1ConfigMapProjectionItems :: !(Maybe [V1KeyToPath]) -- ^ "items" - If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the &#39;..&#39; path or start with &#39;..&#39;.
  , v1ConfigMapProjectionName :: !(Maybe Text) -- ^ "name" - Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  , v1ConfigMapProjectionOptional :: !(Maybe Bool) -- ^ "optional" - Specify whether the ConfigMap or its keys must be defined
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON V1ConfigMapProjection
instance A.FromJSON V1ConfigMapProjection where
  parseJSON = A.withObject "V1ConfigMapProjection" $ \o ->
    V1ConfigMapProjection
      <$> (o .:? "items")
      <*> (o .:? "name")
      <*> (o .:? "optional")

-- | ToJSON V1ConfigMapProjection
instance A.ToJSON V1ConfigMapProjection where
  toJSON V1ConfigMapProjection {..} =
   _omitNulls
      [ "items" .= v1ConfigMapProjectionItems
      , "name" .= v1ConfigMapProjectionName
      , "optional" .= v1ConfigMapProjectionOptional
      ]


-- | Construct a value of type 'V1ConfigMapProjection' (by applying it's required fields, if any)
mkV1ConfigMapProjection
  :: V1ConfigMapProjection
mkV1ConfigMapProjection =
  V1ConfigMapProjection
  { v1ConfigMapProjectionItems = Nothing
  , v1ConfigMapProjectionName = Nothing
  , v1ConfigMapProjectionOptional = Nothing
  }

-- ** V1ConfigMapVolumeSource
-- | V1ConfigMapVolumeSource
-- Adapts a ConfigMap into a volume.  The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
data V1ConfigMapVolumeSource = V1ConfigMapVolumeSource
  { v1ConfigMapVolumeSourceDefaultMode :: !(Maybe Int) -- ^ "defaultMode" - Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  , v1ConfigMapVolumeSourceItems :: !(Maybe [V1KeyToPath]) -- ^ "items" - If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the &#39;..&#39; path or start with &#39;..&#39;.
  , v1ConfigMapVolumeSourceName :: !(Maybe Text) -- ^ "name" - Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  , v1ConfigMapVolumeSourceOptional :: !(Maybe Bool) -- ^ "optional" - Specify whether the ConfigMap or its keys must be defined
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON V1ConfigMapVolumeSource
instance A.FromJSON V1ConfigMapVolumeSource where
  parseJSON = A.withObject "V1ConfigMapVolumeSource" $ \o ->
    V1ConfigMapVolumeSource
      <$> (o .:? "defaultMode")
      <*> (o .:? "items")
      <*> (o .:? "name")
      <*> (o .:? "optional")

-- | ToJSON V1ConfigMapVolumeSource
instance A.ToJSON V1ConfigMapVolumeSource where
  toJSON V1ConfigMapVolumeSource {..} =
   _omitNulls
      [ "defaultMode" .= v1ConfigMapVolumeSourceDefaultMode
      , "items" .= v1ConfigMapVolumeSourceItems
      , "name" .= v1ConfigMapVolumeSourceName
      , "optional" .= v1ConfigMapVolumeSourceOptional
      ]


-- | Construct a value of type 'V1ConfigMapVolumeSource' (by applying it's required fields, if any)
mkV1ConfigMapVolumeSource
  :: V1ConfigMapVolumeSource
mkV1ConfigMapVolumeSource =
  V1ConfigMapVolumeSource
  { v1ConfigMapVolumeSourceDefaultMode = Nothing
  , v1ConfigMapVolumeSourceItems = Nothing
  , v1ConfigMapVolumeSourceName = Nothing
  , v1ConfigMapVolumeSourceOptional = Nothing
  }


-- ** V1ObjectMeta
-- | V1ObjectMeta
-- ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
data V1ObjectMeta = V1ObjectMeta
  { v1ObjectMetaAnnotations :: !(Maybe (Map.Map String Text)) -- ^ "annotations" - Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
  , v1ObjectMetaClusterName :: !(Maybe Text) -- ^ "clusterName" - The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
  , v1ObjectMetaCreationTimestamp :: !(Maybe DateTime) -- ^ "creationTimestamp" - CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.  Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  , v1ObjectMetaDeletionGracePeriodSeconds :: !(Maybe Integer) -- ^ "deletionGracePeriodSeconds" - Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  , v1ObjectMetaDeletionTimestamp :: !(Maybe DateTime) -- ^ "deletionTimestamp" - DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.  Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  , v1ObjectMetaFinalizers :: !(Maybe [Text]) -- ^ "finalizers" - Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
  , v1ObjectMetaGenerateName :: !(Maybe Text) -- ^ "generateName" - GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.  If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
  , v1ObjectMetaGeneration :: !(Maybe Integer) -- ^ "generation" - A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  , v1ObjectMetaLabels :: !(Maybe (Map.Map String Text)) -- ^ "labels" - Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
  , v1ObjectMetaManagedFields :: !(Maybe [V1ManagedFieldsEntry]) -- ^ "managedFields" - ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&#39;t need to set or understand this field. A workflow can be the user&#39;s name, a controller&#39;s name, or the name of a specific apply path like \&quot;ci-cd\&quot;. The set of fields is always in the version that the workflow used when modifying the object.
  , v1ObjectMetaName :: !(Maybe Text) -- ^ "name" - Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
  , v1ObjectMetaNamespace :: !(Maybe Text) -- ^ "namespace" - Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \&quot;default\&quot; namespace, but \&quot;default\&quot; is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
  , v1ObjectMetaOwnerReferences :: !(Maybe [V1OwnerReference]) -- ^ "ownerReferences" - List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  , v1ObjectMetaResourceVersion :: !(Maybe Text) -- ^ "resourceVersion" - An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  , v1ObjectMetaSelfLink :: !(Maybe Text) -- ^ "selfLink" - SelfLink is a URL representing this object. Populated by the system. Read-only.  DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
  , v1ObjectMetaUid :: !(Maybe Text) -- ^ "uid" - UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.  Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON V1ObjectMeta
instance A.FromJSON V1ObjectMeta where
  parseJSON = A.withObject "V1ObjectMeta" $ \o ->
    V1ObjectMeta
      <$> (o .:? "annotations")
      <*> (o .:? "clusterName")
      <*> (o .:? "creationTimestamp")
      <*> (o .:? "deletionGracePeriodSeconds")
      <*> (o .:? "deletionTimestamp")
      <*> (o .:? "finalizers")
      <*> (o .:? "generateName")
      <*> (o .:? "generation")
      <*> (o .:? "labels")
      <*> (o .:? "managedFields")
      <*> (o .:? "name")
      <*> (o .:? "namespace")
      <*> (o .:? "ownerReferences")
      <*> (o .:? "resourceVersion")
      <*> (o .:? "selfLink")
      <*> (o .:? "uid")

-- | ToJSON V1ObjectMeta
instance A.ToJSON V1ObjectMeta where
  toJSON V1ObjectMeta {..} =
   _omitNulls
      [ "annotations" .= v1ObjectMetaAnnotations
      , "clusterName" .= v1ObjectMetaClusterName
      , "creationTimestamp" .= v1ObjectMetaCreationTimestamp
      , "deletionGracePeriodSeconds" .= v1ObjectMetaDeletionGracePeriodSeconds
      , "deletionTimestamp" .= v1ObjectMetaDeletionTimestamp
      , "finalizers" .= v1ObjectMetaFinalizers
      , "generateName" .= v1ObjectMetaGenerateName
      , "generation" .= v1ObjectMetaGeneration
      , "labels" .= v1ObjectMetaLabels
      , "managedFields" .= v1ObjectMetaManagedFields
      , "name" .= v1ObjectMetaName
      , "namespace" .= v1ObjectMetaNamespace
      , "ownerReferences" .= v1ObjectMetaOwnerReferences
      , "resourceVersion" .= v1ObjectMetaResourceVersion
      , "selfLink" .= v1ObjectMetaSelfLink
      , "uid" .= v1ObjectMetaUid
      ]


-- | Construct a value of type 'V1ObjectMeta' (by applying it's required fields, if any)
mkV1ObjectMeta
  :: V1ObjectMeta
mkV1ObjectMeta =
  V1ObjectMeta
  { v1ObjectMetaAnnotations = Nothing
  , v1ObjectMetaClusterName = Nothing
  , v1ObjectMetaCreationTimestamp = Nothing
  , v1ObjectMetaDeletionGracePeriodSeconds = Nothing
  , v1ObjectMetaDeletionTimestamp = Nothing
  , v1ObjectMetaFinalizers = Nothing
  , v1ObjectMetaGenerateName = Nothing
  , v1ObjectMetaGeneration = Nothing
  , v1ObjectMetaLabels = Nothing
  , v1ObjectMetaManagedFields = Nothing
  , v1ObjectMetaName = Nothing
  , v1ObjectMetaNamespace = Nothing
  , v1ObjectMetaOwnerReferences = Nothing
  , v1ObjectMetaResourceVersion = Nothing
  , v1ObjectMetaSelfLink = Nothing
  , v1ObjectMetaUid = Nothing
  }



-- ** V1ManagedFieldsEntry
-- | V1ManagedFieldsEntry
-- ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
data V1ManagedFieldsEntry = V1ManagedFieldsEntry
  { v1ManagedFieldsEntryApiVersion :: !(Maybe Text) -- ^ "apiVersion" - APIVersion defines the version of this resource that this field set applies to. The format is \&quot;group/version\&quot; just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
  , v1ManagedFieldsEntryFieldsType :: !(Maybe Text) -- ^ "fieldsType" - FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \&quot;FieldsV1\&quot;
  , v1ManagedFieldsEntryFieldsV1 :: !(Maybe A.Value) -- ^ "fieldsV1" - FieldsV1 holds the first JSON version format as described in the \&quot;FieldsV1\&quot; type.
  , v1ManagedFieldsEntryManager :: !(Maybe Text) -- ^ "manager" - Manager is an identifier of the workflow managing these fields.
  , v1ManagedFieldsEntryOperation :: !(Maybe Text) -- ^ "operation" - Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are &#39;Apply&#39; and &#39;Update&#39;.
  , v1ManagedFieldsEntryTime :: !(Maybe DateTime) -- ^ "time" - Time is timestamp of when these fields were set. It should always be empty if Operation is &#39;Apply&#39;
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON V1ManagedFieldsEntry
instance A.FromJSON V1ManagedFieldsEntry where
  parseJSON = A.withObject "V1ManagedFieldsEntry" $ \o ->
    V1ManagedFieldsEntry
      <$> (o .:? "apiVersion")
      <*> (o .:? "fieldsType")
      <*> (o .:? "fieldsV1")
      <*> (o .:? "manager")
      <*> (o .:? "operation")
      <*> (o .:? "time")

-- | ToJSON V1ManagedFieldsEntry
instance A.ToJSON V1ManagedFieldsEntry where
  toJSON V1ManagedFieldsEntry {..} =
   _omitNulls
      [ "apiVersion" .= v1ManagedFieldsEntryApiVersion
      , "fieldsType" .= v1ManagedFieldsEntryFieldsType
      , "fieldsV1" .= v1ManagedFieldsEntryFieldsV1
      , "manager" .= v1ManagedFieldsEntryManager
      , "operation" .= v1ManagedFieldsEntryOperation
      , "time" .= v1ManagedFieldsEntryTime
      ]


-- | Construct a value of type 'V1ManagedFieldsEntry' (by applying it's required fields, if any)
mkV1ManagedFieldsEntry
  :: V1ManagedFieldsEntry
mkV1ManagedFieldsEntry =
  V1ManagedFieldsEntry
  { v1ManagedFieldsEntryApiVersion = Nothing
  , v1ManagedFieldsEntryFieldsType = Nothing
  , v1ManagedFieldsEntryFieldsV1 = Nothing
  , v1ManagedFieldsEntryManager = Nothing
  , v1ManagedFieldsEntryOperation = Nothing
  , v1ManagedFieldsEntryTime = Nothing
  }


-- ** V1OwnerReference
-- | V1OwnerReference
-- OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
data V1OwnerReference = V1OwnerReference
  { v1OwnerReferenceApiVersion :: !(Text) -- ^ /Required/ "apiVersion" - API version of the referent.
  , v1OwnerReferenceBlockOwnerDeletion :: !(Maybe Bool) -- ^ "blockOwnerDeletion" - If true, AND if the owner has the \&quot;foregroundDeletion\&quot; finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \&quot;delete\&quot; permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
  , v1OwnerReferenceController :: !(Maybe Bool) -- ^ "controller" - If true, this reference points to the managing controller.
  , v1OwnerReferenceKind :: !(Text) -- ^ /Required/ "kind" - Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  , v1OwnerReferenceName :: !(Text) -- ^ /Required/ "name" - Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
  , v1OwnerReferenceUid :: !(Text) -- ^ /Required/ "uid" - UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON V1OwnerReference
instance A.FromJSON V1OwnerReference where
  parseJSON = A.withObject "V1OwnerReference" $ \o ->
    V1OwnerReference
      <$> (o .:  "apiVersion")
      <*> (o .:? "blockOwnerDeletion")
      <*> (o .:? "controller")
      <*> (o .:  "kind")
      <*> (o .:  "name")
      <*> (o .:  "uid")

-- | ToJSON V1OwnerReference
instance A.ToJSON V1OwnerReference where
  toJSON V1OwnerReference {..} =
   _omitNulls
      [ "apiVersion" .= v1OwnerReferenceApiVersion
      , "blockOwnerDeletion" .= v1OwnerReferenceBlockOwnerDeletion
      , "controller" .= v1OwnerReferenceController
      , "kind" .= v1OwnerReferenceKind
      , "name" .= v1OwnerReferenceName
      , "uid" .= v1OwnerReferenceUid
      ]


-- | Construct a value of type 'V1OwnerReference' (by applying it's required fields, if any)
mkV1OwnerReference
  :: Text -- ^ 'v1OwnerReferenceApiVersion': API version of the referent.
  -> Text -- ^ 'v1OwnerReferenceKind': Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  -> Text -- ^ 'v1OwnerReferenceName': Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
  -> Text -- ^ 'v1OwnerReferenceUid': UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
  -> V1OwnerReference
mkV1OwnerReference v1OwnerReferenceApiVersion v1OwnerReferenceKind v1OwnerReferenceName v1OwnerReferenceUid =
  V1OwnerReference
  { v1OwnerReferenceApiVersion
  , v1OwnerReferenceBlockOwnerDeletion = Nothing
  , v1OwnerReferenceController = Nothing
  , v1OwnerReferenceKind
  , v1OwnerReferenceName
  , v1OwnerReferenceUid
  }


-- ** V1ListMeta
-- | V1ListMeta
-- ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
data V1ListMeta = V1ListMeta
  { v1ListMetaContinue :: !(Maybe Text) -- ^ "continue" - continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
  , v1ListMetaRemainingItemCount :: !(Maybe Integer) -- ^ "remainingItemCount" - remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
  , v1ListMetaResourceVersion :: !(Maybe Text) -- ^ "resourceVersion" - String that identifies the server&#39;s internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  , v1ListMetaSelfLink :: !(Maybe Text) -- ^ "selfLink" - selfLink is a URL representing this object. Populated by the system. Read-only.  DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON V1ListMeta
instance A.FromJSON V1ListMeta where
  parseJSON = A.withObject "V1ListMeta" $ \o ->
    V1ListMeta
      <$> (o .:? "continue")
      <*> (o .:? "remainingItemCount")
      <*> (o .:? "resourceVersion")
      <*> (o .:? "selfLink")

-- | ToJSON V1ListMeta
instance A.ToJSON V1ListMeta where
  toJSON V1ListMeta {..} =
   _omitNulls
      [ "continue" .= v1ListMetaContinue
      , "remainingItemCount" .= v1ListMetaRemainingItemCount
      , "resourceVersion" .= v1ListMetaResourceVersion
      , "selfLink" .= v1ListMetaSelfLink
      ]


-- | Construct a value of type 'V1ListMeta' (by applying it's required fields, if any)
mkV1ListMeta
  :: V1ListMeta
mkV1ListMeta =
  V1ListMeta
  { v1ListMetaContinue = Nothing
  , v1ListMetaRemainingItemCount = Nothing
  , v1ListMetaResourceVersion = Nothing
  , v1ListMetaSelfLink = Nothing
  }

-- ** V1KeyToPath
-- | V1KeyToPath
-- Maps a string key to a path within a volume.
data V1KeyToPath = V1KeyToPath
  { v1KeyToPathKey :: !(Text) -- ^ /Required/ "key" - The key to project.
  , v1KeyToPathMode :: !(Maybe Int) -- ^ "mode" - Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  , v1KeyToPathPath :: !(Text) -- ^ /Required/ "path" - The relative path of the file to map the key to. May not be an absolute path. May not contain the path element &#39;..&#39;. May not start with the string &#39;..&#39;.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON V1KeyToPath
instance A.FromJSON V1KeyToPath where
  parseJSON = A.withObject "V1KeyToPath" $ \o ->
    V1KeyToPath
      <$> (o .:  "key")
      <*> (o .:? "mode")
      <*> (o .:  "path")

-- | ToJSON V1KeyToPath
instance A.ToJSON V1KeyToPath where
  toJSON V1KeyToPath {..} =
   _omitNulls
      [ "key" .= v1KeyToPathKey
      , "mode" .= v1KeyToPathMode
      , "path" .= v1KeyToPathPath
      ]


-- | Construct a value of type 'V1KeyToPath' (by applying it's required fields, if any)
mkV1KeyToPath
  :: Text -- ^ 'v1KeyToPathKey': The key to project.
  -> Text -- ^ 'v1KeyToPathPath': The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
  -> V1KeyToPath
mkV1KeyToPath v1KeyToPathKey v1KeyToPathPath =
  V1KeyToPath
  { v1KeyToPathKey
  , v1KeyToPathMode = Nothing
  , v1KeyToPathPath
  }



-- ** VersionInfo
-- | VersionInfo
-- Info contains versioning information. how we'll want to distribute that information.
data VersionInfo = VersionInfo
  { versionInfoBuildDate :: !(Text) -- ^ /Required/ "buildDate"
  , versionInfoCompiler :: !(Text) -- ^ /Required/ "compiler"
  , versionInfoGitCommit :: !(Text) -- ^ /Required/ "gitCommit"
  , versionInfoGitTreeState :: !(Text) -- ^ /Required/ "gitTreeState"
  , versionInfoGitVersion :: !(Text) -- ^ /Required/ "gitVersion"
  , versionInfoGoVersion :: !(Text) -- ^ /Required/ "goVersion"
  , versionInfoMajor :: !(Text) -- ^ /Required/ "major"
  , versionInfoMinor :: !(Text) -- ^ /Required/ "minor"
  , versionInfoPlatform :: !(Text) -- ^ /Required/ "platform"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON VersionInfo
instance A.FromJSON VersionInfo where
  parseJSON = A.withObject "VersionInfo" $ \o ->
    VersionInfo
      <$> (o .:  "buildDate")
      <*> (o .:  "compiler")
      <*> (o .:  "gitCommit")
      <*> (o .:  "gitTreeState")
      <*> (o .:  "gitVersion")
      <*> (o .:  "goVersion")
      <*> (o .:  "major")
      <*> (o .:  "minor")
      <*> (o .:  "platform")

-- | ToJSON VersionInfo
instance A.ToJSON VersionInfo where
  toJSON VersionInfo {..} =
   _omitNulls
      [ "buildDate" .= versionInfoBuildDate
      , "compiler" .= versionInfoCompiler
      , "gitCommit" .= versionInfoGitCommit
      , "gitTreeState" .= versionInfoGitTreeState
      , "gitVersion" .= versionInfoGitVersion
      , "goVersion" .= versionInfoGoVersion
      , "major" .= versionInfoMajor
      , "minor" .= versionInfoMinor
      , "platform" .= versionInfoPlatform
      ]


-- | Construct a value of type 'VersionInfo' (by applying it's required fields, if any)
mkVersionInfo
  :: Text -- ^ 'versionInfoBuildDate' 
  -> Text -- ^ 'versionInfoCompiler' 
  -> Text -- ^ 'versionInfoGitCommit' 
  -> Text -- ^ 'versionInfoGitTreeState' 
  -> Text -- ^ 'versionInfoGitVersion' 
  -> Text -- ^ 'versionInfoGoVersion' 
  -> Text -- ^ 'versionInfoMajor' 
  -> Text -- ^ 'versionInfoMinor' 
  -> Text -- ^ 'versionInfoPlatform' 
  -> VersionInfo
mkVersionInfo versionInfoBuildDate versionInfoCompiler versionInfoGitCommit versionInfoGitTreeState versionInfoGitVersion versionInfoGoVersion versionInfoMajor versionInfoMinor versionInfoPlatform =
  VersionInfo
  { versionInfoBuildDate
  , versionInfoCompiler
  , versionInfoGitCommit
  , versionInfoGitTreeState
  , versionInfoGitVersion
  , versionInfoGoVersion
  , versionInfoMajor
  , versionInfoMinor
  , versionInfoPlatform
  }




-- * Auth Methods

-- ** AuthApiKeyBearerToken
data AuthApiKeyBearerToken =
  AuthApiKeyBearerToken Text -- ^ secret
  deriving (P.Eq, P.Show, P.Typeable)

instance AuthMethod AuthApiKeyBearerToken where
  applyAuthMethod _ a@(AuthApiKeyBearerToken secret) req =
    P.pure $
    if (P.typeOf a `P.elem` rAuthTypes req)
      then req `setHeader` toHeader ("authorization", secret)
           & L.over rAuthTypesL (P.filter (/= P.typeOf a))
      else req


-- ** V1Status
-- | V1Status
-- Status is a return value for calls that don't return other objects.
data V1Status = V1Status
  { v1StatusApiVersion :: !(Maybe Text) -- ^ "apiVersion" - APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  , v1StatusCode :: !(Maybe Int) -- ^ "code" - Suggested HTTP return code for this status, 0 if not set.
  , v1StatusDetails :: !(Maybe V1StatusDetails) -- ^ "details"
  , v1StatusKind :: !(Maybe Text) -- ^ "kind" - Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  , v1StatusMessage :: !(Maybe Text) -- ^ "message" - A human-readable description of the status of this operation.
  , v1StatusMetadata :: !(Maybe V1ListMeta) -- ^ "metadata"
  , v1StatusReason :: !(Maybe Text) -- ^ "reason" - A machine-readable description of why this operation is in the \&quot;Failure\&quot; status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
  , v1StatusStatus :: !(Maybe Text) -- ^ "status" - Status of the operation. One of: \&quot;Success\&quot; or \&quot;Failure\&quot;. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON V1Status
instance A.FromJSON V1Status where
  parseJSON = A.withObject "V1Status" $ \o ->
    V1Status
      <$> (o .:? "apiVersion")
      <*> (o .:? "code")
      <*> (o .:? "details")
      <*> (o .:? "kind")
      <*> (o .:? "message")
      <*> (o .:? "metadata")
      <*> (o .:? "reason")
      <*> (o .:? "status")

-- | ToJSON V1Status
instance A.ToJSON V1Status where
  toJSON V1Status {..} =
   _omitNulls
      [ "apiVersion" .= v1StatusApiVersion
      , "code" .= v1StatusCode
      , "details" .= v1StatusDetails
      , "kind" .= v1StatusKind
      , "message" .= v1StatusMessage
      , "metadata" .= v1StatusMetadata
      , "reason" .= v1StatusReason
      , "status" .= v1StatusStatus
      ]


-- | Construct a value of type 'V1Status' (by applying it's required fields, if any)
mkV1Status
  :: V1Status
mkV1Status =
  V1Status
  { v1StatusApiVersion = Nothing
  , v1StatusCode = Nothing
  , v1StatusDetails = Nothing
  , v1StatusKind = Nothing
  , v1StatusMessage = Nothing
  , v1StatusMetadata = Nothing
  , v1StatusReason = Nothing
  , v1StatusStatus = Nothing
  }

-- ** V1StatusDetails
-- | V1StatusDetails
-- StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
data V1StatusDetails = V1StatusDetails
  { v1StatusDetailsCauses :: !(Maybe [V1StatusCause]) -- ^ "causes" - The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
  , v1StatusDetailsGroup :: !(Maybe Text) -- ^ "group" - The group attribute of the resource associated with the status StatusReason.
  , v1StatusDetailsKind :: !(Maybe Text) -- ^ "kind" - The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  , v1StatusDetailsName :: !(Maybe Text) -- ^ "name" - The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
  , v1StatusDetailsRetryAfterSeconds :: !(Maybe Int) -- ^ "retryAfterSeconds" - If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
  , v1StatusDetailsUid :: !(Maybe Text) -- ^ "uid" - UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON V1StatusDetails
instance A.FromJSON V1StatusDetails where
  parseJSON = A.withObject "V1StatusDetails" $ \o ->
    V1StatusDetails
      <$> (o .:? "causes")
      <*> (o .:? "group")
      <*> (o .:? "kind")
      <*> (o .:? "name")
      <*> (o .:? "retryAfterSeconds")
      <*> (o .:? "uid")

-- | ToJSON V1StatusDetails
instance A.ToJSON V1StatusDetails where
  toJSON V1StatusDetails {..} =
   _omitNulls
      [ "causes" .= v1StatusDetailsCauses
      , "group" .= v1StatusDetailsGroup
      , "kind" .= v1StatusDetailsKind
      , "name" .= v1StatusDetailsName
      , "retryAfterSeconds" .= v1StatusDetailsRetryAfterSeconds
      , "uid" .= v1StatusDetailsUid
      ]


-- | Construct a value of type 'V1StatusDetails' (by applying it's required fields, if any)
mkV1StatusDetails
  :: V1StatusDetails
mkV1StatusDetails =
  V1StatusDetails
  { v1StatusDetailsCauses = Nothing
  , v1StatusDetailsGroup = Nothing
  , v1StatusDetailsKind = Nothing
  , v1StatusDetailsName = Nothing
  , v1StatusDetailsRetryAfterSeconds = Nothing
  , v1StatusDetailsUid = Nothing
  }


-- ** V1StatusCause
-- | V1StatusCause
-- StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
data V1StatusCause = V1StatusCause
  { v1StatusCauseField :: !(Maybe Text) -- ^ "field" - The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.  Examples:   \&quot;name\&quot; - the field \&quot;name\&quot; on the current resource   \&quot;items[0].name\&quot; - the field \&quot;name\&quot; on the first array entry in \&quot;items\&quot;
  , v1StatusCauseMessage :: !(Maybe Text) -- ^ "message" - A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
  , v1StatusCauseReason :: !(Maybe Text) -- ^ "reason" - A machine-readable description of the cause of the error. If this value is empty there is no information available.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON V1StatusCause
instance A.FromJSON V1StatusCause where
  parseJSON = A.withObject "V1StatusCause" $ \o ->
    V1StatusCause
      <$> (o .:? "field")
      <*> (o .:? "message")
      <*> (o .:? "reason")

-- | ToJSON V1StatusCause
instance A.ToJSON V1StatusCause where
  toJSON V1StatusCause {..} =
   _omitNulls
      [ "field" .= v1StatusCauseField
      , "message" .= v1StatusCauseMessage
      , "reason" .= v1StatusCauseReason
      ]


-- | Construct a value of type 'V1StatusCause' (by applying it's required fields, if any)
mkV1StatusCause
  :: V1StatusCause
mkV1StatusCause =
  V1StatusCause
  { v1StatusCauseField = Nothing
  , v1StatusCauseMessage = Nothing
  , v1StatusCauseReason = Nothing
  }

-- ** V1DeleteOptions
-- | V1DeleteOptions
-- DeleteOptions may be provided when deleting an API object.
data V1DeleteOptions = V1DeleteOptions
  { v1DeleteOptionsApiVersion :: !(Maybe Text) -- ^ "apiVersion" - APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  , v1DeleteOptionsDryRun :: !(Maybe [Text]) -- ^ "dryRun" - When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  , v1DeleteOptionsGracePeriodSeconds :: !(Maybe Integer) -- ^ "gracePeriodSeconds" - The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  , v1DeleteOptionsKind :: !(Maybe Text) -- ^ "kind" - Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  , v1DeleteOptionsOrphanDependents :: !(Maybe Bool) -- ^ "orphanDependents" - Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  , v1DeleteOptionsPreconditions :: !(Maybe V1Preconditions) -- ^ "preconditions"
  , v1DeleteOptionsPropagationPolicy :: !(Maybe Text) -- ^ "propagationPolicy" - Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON V1DeleteOptions
instance A.FromJSON V1DeleteOptions where
  parseJSON = A.withObject "V1DeleteOptions" $ \o ->
    V1DeleteOptions
      <$> (o .:? "apiVersion")
      <*> (o .:? "dryRun")
      <*> (o .:? "gracePeriodSeconds")
      <*> (o .:? "kind")
      <*> (o .:? "orphanDependents")
      <*> (o .:? "preconditions")
      <*> (o .:? "propagationPolicy")

-- | ToJSON V1DeleteOptions
instance A.ToJSON V1DeleteOptions where
  toJSON V1DeleteOptions {..} =
   _omitNulls
      [ "apiVersion" .= v1DeleteOptionsApiVersion
      , "dryRun" .= v1DeleteOptionsDryRun
      , "gracePeriodSeconds" .= v1DeleteOptionsGracePeriodSeconds
      , "kind" .= v1DeleteOptionsKind
      , "orphanDependents" .= v1DeleteOptionsOrphanDependents
      , "preconditions" .= v1DeleteOptionsPreconditions
      , "propagationPolicy" .= v1DeleteOptionsPropagationPolicy
      ]


-- | Construct a value of type 'V1DeleteOptions' (by applying it's required fields, if any)
mkV1DeleteOptions
  :: V1DeleteOptions
mkV1DeleteOptions =
  V1DeleteOptions
  { v1DeleteOptionsApiVersion = Nothing
  , v1DeleteOptionsDryRun = Nothing
  , v1DeleteOptionsGracePeriodSeconds = Nothing
  , v1DeleteOptionsKind = Nothing
  , v1DeleteOptionsOrphanDependents = Nothing
  , v1DeleteOptionsPreconditions = Nothing
  , v1DeleteOptionsPropagationPolicy = Nothing
  }

-- ** V1Preconditions
-- | V1Preconditions
-- Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
data V1Preconditions = V1Preconditions
  { v1PreconditionsResourceVersion :: !(Maybe Text) -- ^ "resourceVersion" - Specifies the target ResourceVersion
  , v1PreconditionsUid :: !(Maybe Text) -- ^ "uid" - Specifies the target UID.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON V1Preconditions
instance A.FromJSON V1Preconditions where
  parseJSON = A.withObject "V1Preconditions" $ \o ->
    V1Preconditions
      <$> (o .:? "resourceVersion")
      <*> (o .:? "uid")

-- | ToJSON V1Preconditions
instance A.ToJSON V1Preconditions where
  toJSON V1Preconditions {..} =
   _omitNulls
      [ "resourceVersion" .= v1PreconditionsResourceVersion
      , "uid" .= v1PreconditionsUid
      ]


-- | Construct a value of type 'V1Preconditions' (by applying it's required fields, if any)
mkV1Preconditions
  :: V1Preconditions
mkV1Preconditions =
  V1Preconditions
  { v1PreconditionsResourceVersion = Nothing
  , v1PreconditionsUid = Nothing
  }

